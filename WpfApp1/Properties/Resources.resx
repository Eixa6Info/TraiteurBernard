<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actif" xml:space="preserve">
    <value>Actif</value>
  </data>
  <data name="ActifInactif" xml:space="preserve">
    <value>Actif &amp; Inactif</value>
  </data>
  <data name="AllTournees" xml:space="preserve">
    <value>Toutes les tournées</value>
  </data>
  <data name="CT" xml:space="preserve">
    <value>contre-tournée</value>
  </data>
  <data name="imgCircle" xml:space="preserve">
    <value>C:\\eixa6\\circle.png</value>
  </data>
  <data name="Inactif" xml:space="preserve">
    <value>Inactif</value>
  </data>
  <data name="Marennes" xml:space="preserve">
    <value>Marennes</value>
  </data>
  <data name="MessageLogCopyFichierDbLocalToNas" xml:space="preserve">
    <value>Le fichier traiteur.db est copié de local au nas</value>
  </data>
  <data name="MessageLogCopyLocalToNas" xml:space="preserve">
    <value>Le fichier de base de données a été copié du local vers le dossier nas</value>
  </data>
  <data name="MessageLogCopyNasToLocal" xml:space="preserve">
    <value>Le fichier de base de données a été copié du nas vers le dossier local</value>
  </data>
  <data name="MessageLogDeuxiemeSauvegarde" xml:space="preserve">
    <value>Deuxième sauvegarde sur le nas OK</value>
  </data>
  <data name="MessageLogFichierDbPasSurNasIlCoupe" xml:space="preserve">
    <value>Le fichier traiteur.db n'existe pas sur le nas il coupe l'application</value>
  </data>
  <data name="MessageLogFichierDbPasSurNasTravailEnLocal" xml:space="preserve">
    <value>Le fichier traiteur.db n'existe pas sur le nas mais il travail en local</value>
  </data>
  <data name="MessageLogFichierDbSaveLocalPasNas" xml:space="preserve">
    <value>Le fichier traiteur.db est enregistré en local pas sur le nas</value>
  </data>
  <data name="MessageLogFichierLockExiste" xml:space="preserve">
    <value>Le fichier lock existe.</value>
  </data>
  <data name="MessageLogFichierLockExistePas" xml:space="preserve">
    <value>Le fichier lock n'existe pas, il est créé.</value>
  </data>
  <data name="MessageLogFichierLockKo" xml:space="preserve">
    <value>Le fichier lock est present il quitte l'application.</value>
  </data>
  <data name="MessageLogFichierLockOk" xml:space="preserve">
    <value>Le fichier lock est present il force le lancement de l'application.</value>
  </data>
  <data name="MessageLogSauvegardeLocalToNas" xml:space="preserve">
    <value>Le fichier traiteur.db est bien sauvegardé sur le nas</value>
  </data>
  <data name="MessageLogXmlNoLocal" xml:space="preserve">
    <value>Le fichier nas.xml n'est pas présent il coupe l'application pour paramétrer le nas.xml.</value>
  </data>
  <data name="MessageLogXmlYesLocal" xml:space="preserve">
    <value>Le fichier nas.xml n'est pas present il travail en local.</value>
  </data>
  <data name="MessagePopUpCopyFichierDbLocalToNas" xml:space="preserve">
    <value>Le fichier de données est enregistré sur le NAS.</value>
  </data>
  <data name="MessagePopUpCopyLocalToNas" xml:space="preserve">
    <value>Le fichier de données a été récupéré sur le NAS.</value>
  </data>
  <data name="MessagePopUpCopyNasToLocal" xml:space="preserve">
    <value>Le fichier de données a été récupéré sur le NAS.</value>
  </data>
  <data name="MessagePopUpEixa6Alerte" xml:space="preserve">
    <value>Problème avec le fichier de données ! Contacter EIXA6 Informatique</value>
  </data>
  <data name="MessagePopUpFicherLockExiste" xml:space="preserve">
    <value>Un autre utilisateur travail sur le fichier de base de données. Voulez-vous quand même travailler sur le même fichier ? Un risque de tous perdre est envisageable.</value>
  </data>
  <data name="MessagePopUpNasExistePas" xml:space="preserve">
    <value>Vous n'avez pas accès au NAS voulez-vous travailler en local ?</value>
  </data>
  <data name="MessagePopUpSauvegardeLocalToNas" xml:space="preserve">
    <value>Le fichier de données est enregistré sur le NAS.</value>
  </data>
  <data name="MessagePopUpXml" xml:space="preserve">
    <value>Le fichier de configuration du nas n'est pas créé voulez-vous travailler en local?</value>
  </data>
  <data name="MessagePopUpXmlNoLocal" xml:space="preserve">
    <value>Veuillez configurer le fichier nas.xml</value>
  </data>
  <data name="TitrePopUpAlerte" xml:space="preserve">
    <value>Alerte</value>
  </data>
  <data name="TitrePopUpInfo" xml:space="preserve">
    <value>Information</value>
  </data>
  <data name="Ville1" xml:space="preserve">
    <value>ville 1</value>
  </data>
  <data name="Ville2" xml:space="preserve">
    <value>ville 2</value>
  </data>
</root>